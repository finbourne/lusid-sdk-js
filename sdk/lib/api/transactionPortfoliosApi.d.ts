/// <reference types="node" />
import http = require('http');
import { AdjustHolding } from '../model/adjustHolding';
import { AdjustHoldingRequest } from '../model/adjustHoldingRequest';
import { CreatePortfolioDetails } from '../model/createPortfolioDetails';
import { CreateTransactionPortfolioRequest } from '../model/createTransactionPortfolioRequest';
import { DeletedEntityResponse } from '../model/deletedEntityResponse';
import { ExecutionRequest } from '../model/executionRequest';
import { HoldingsAdjustment } from '../model/holdingsAdjustment';
import { PerpetualProperty } from '../model/perpetualProperty';
import { Portfolio } from '../model/portfolio';
import { PortfolioDetails } from '../model/portfolioDetails';
import { ResourceListOfHoldingsAdjustmentHeader } from '../model/resourceListOfHoldingsAdjustmentHeader';
import { TransactionQueryParameters } from '../model/transactionQueryParameters';
import { TransactionRequest } from '../model/transactionRequest';
import { UpsertPortfolioExecutionsResponse } from '../model/upsertPortfolioExecutionsResponse';
import { UpsertPortfolioTransactionsResponse } from '../model/upsertPortfolioTransactionsResponse';
import { UpsertTransactionPropertiesResponse } from '../model/upsertTransactionPropertiesResponse';
import { VersionedResourceListOfOutputTransaction } from '../model/versionedResourceListOfOutputTransaction';
import { VersionedResourceListOfPortfolioHolding } from '../model/versionedResourceListOfPortfolioHolding';
import { VersionedResourceListOfTransaction } from '../model/versionedResourceListOfTransaction';
import { Authentication } from '../model/models';
import { OAuth } from '../model/models';
export declare enum TransactionPortfoliosApiApiKeys {
}
export declare class TransactionPortfoliosApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'oauth2': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TransactionPortfoliosApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will  automatically construct adjustment transactions to ensure that the holdings which have been adjusted are  always set to the provided targets for the specified effective datetime. Read more about the difference between  adjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.
     * @summary [EARLY ACCESS] Adjust holdings
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label at which the holdings should be set to the provided targets.
     * @param holdingAdjustments The selected set of holdings to adjust to the provided targets for the              transaction portfolio.
     */
    adjustHoldings(scope: string, code: string, effectiveAt: string, holdingAdjustments?: Array<AdjustHoldingRequest>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AdjustHolding;
    }>;
    /**
     * Builds and returns all transactions that affect the holdings of a portfolio over a given interval of  effective time into a set of output transactions. This includes transactions automatically generated by  LUSID such as holding adjustments.
     * @summary [EARLY ACCESS] Build transactions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param parameters The query parameters which control how the output transactions are built.
     * @param asAt The asAt datetime at which to build the transactions. Defaults to return the latest              version of each transaction if not specified.
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;Transaction\&quot; domain to decorate onto              the transactions. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;Transaction/strategy/quantsignal\&quot;.
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.
     */
    buildTransactions(scope: string, code: string, parameters: TransactionQueryParameters, asAt?: Date, propertyKeys?: Array<string>, filter?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: VersionedResourceListOfOutputTransaction;
    }>;
    /**
     * Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective  datetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.
     * @summary [EARLY ACCESS] Cancel adjust holdings
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label at which the holding adjustments should be undone.
     */
    cancelAdjustHoldings(scope: string, code: string, effectiveAt: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DeletedEntityResponse;
    }>;
    /**
     * Cancel one or more executions which exist in a specified transaction portfolio.
     * @summary [EARLY ACCESS] Cancel executions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param executionIds The ids of the executions to cancel.
     */
    cancelExecutions(scope: string, code: string, executionIds: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DeletedEntityResponse;
    }>;
    /**
     * Cancel one or more transactions from the specified transaction portfolio.
     * @summary [EARLY ACCESS] Cancel transactions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param transactionIds The ids of the transactions to cancel.
     */
    cancelTransactions(scope: string, code: string, transactionIds: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DeletedEntityResponse;
    }>;
    /**
     * Create a transaction portfolio in a specific scope.
     * @summary [EARLY ACCESS] Create portfolio
     * @param scope The scope that the transaction portfolio will be created in.
     * @param createRequest The definition and details of the transaction portfolio.
     */
    createPortfolio(scope: string, createRequest?: CreateTransactionPortfolioRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Portfolio;
    }>;
    /**
     * Delete a single property value from a single transaction in a transaction portfolio.
     * @summary [EARLY ACCESS] Delete property from transaction
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param transactionId The unique id of the transaction to delete the property value from.
     * @param transactionPropertyKey The property key of the property value to delete from the transaction.              This must be from the \&quot;Transaction\&quot; domain and will have the format {domain}/{scope}/{code} e.g.              \&quot;Transaction/strategy/quantsignal\&quot;.
     */
    deletePropertyFromTransaction(scope: string, code: string, transactionId: string, transactionPropertyKey: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DeletedEntityResponse;
    }>;
    /**
     * Get the details associated with a transaction portfolio.
     * @summary [EARLY ACCESS] Get details
     * @param scope The scope of the transaction portfolio to retrieve the details for.
     * @param code The code of the transaction portfolio to retrieve the details for. Together with the              scope this uniquely identifies the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label at which to retrieve the details of the transaction              portfolio. Defaults to the current LUSID system datetime if not specified.
     * @param asAt The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults              to return the latest version of the details if not specified.
     */
    getDetails(scope: string, code: string, effectiveAt?: string, asAt?: Date, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PortfolioDetails;
    }>;
    /**
     * Get the holdings of the specified transaction portfolio.
     * @summary [EARLY ACCESS] Get holdings
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param byTaxlots Whether or not to expand the holdings to return the underlying tax-lots. Defaults to              False.
     * @param effectiveAt The effective datetime or cut label at which to retrieve the holdings of the transaction              portfolio. Defaults to the current LUSID system datetime if not specified.
     * @param asAt The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults              to return the latest version of the holdings if not specified.
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;Holding\&quot; domain to decorate onto              the holdings. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or \&quot;Holding/system/Cost\&quot;.
     */
    getHoldings(scope: string, code: string, byTaxlots?: boolean, effectiveAt?: string, asAt?: Date, filter?: string, propertyKeys?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: VersionedResourceListOfPortfolioHolding;
    }>;
    /**
     * Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a  holdings adjustment will only be returned if one exists for the specified effective datetime.
     * @summary [EARLY ACCESS] Get holdings adjustment
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label of the holdings adjustment.
     * @param asAt The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest              version of the holdings adjustment if not specified.
     */
    getHoldingsAdjustment(scope: string, code: string, effectiveAt: string, asAt?: Date, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: HoldingsAdjustment;
    }>;
    /**
     * Get transactions from the specified transaction portfolio over a given interval of effective time.     When the specified portfolio is a derived transaction portfolio, the returned set of transactions is the  union set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.  The maximum number of transactions that this method can get per request is 2,000.
     * @summary [EARLY ACCESS] Get transactions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param fromTransactionDate The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.              There is no lower bound if this is not specified.
     * @param toTransactionDate The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.              There is no upper bound if this is not specified.
     * @param asAt The asAt datetime at which to retrieve the transactions. Defaults to return the latest version              of each transaction if not specified.
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;Transaction\&quot; domain to decorate onto              the transactions. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;Transaction/strategy/quantsignal\&quot;.
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.
     */
    getTransactions(scope: string, code: string, fromTransactionDate?: string, toTransactionDate?: string, asAt?: Date, propertyKeys?: Array<string>, filter?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: VersionedResourceListOfTransaction;
    }>;
    /**
     * List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.
     * @summary [EARLY ACCESS] List holdings adjustments
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param fromEffectiveAt The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings              adjustments. There is no lower bound if this is not specified.
     * @param toEffectiveAt The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings              adjustments. There is no upper bound if this is not specified.
     * @param asAt The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the              latest version of each holding adjustment if not specified.
     */
    listHoldingsAdjustments(scope: string, code: string, fromEffectiveAt?: string, toEffectiveAt?: string, asAt?: Date, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResourceListOfHoldingsAdjustmentHeader;
    }>;
    /**
     * Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically  construct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio  are always set to the provided targets for the specified effective datetime. Read more about the difference between  adjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.
     * @summary [EARLY ACCESS] Set holdings
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label at which the holdings should be set to the provided targets.
     * @param holdingAdjustments The complete set of target holdings for the transaction portfolio.
     */
    setHoldings(scope: string, code: string, effectiveAt: string, holdingAdjustments?: Array<AdjustHoldingRequest>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AdjustHolding;
    }>;
    /**
     * Update or insert executions into the specified transaction portfolio. An execution will be updated  if it already exists and inserted if it does not.
     * @summary [EARLY ACCESS] Upsert executions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param executions The executions to update or insert.
     */
    upsertExecutions(scope: string, code: string, executions?: Array<ExecutionRequest>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UpsertPortfolioExecutionsResponse;
    }>;
    /**
     * Update or insert details for the specified transaction portfolio. The details will be updated  if they already exist and inserted if they do not.
     * @summary [EARLY ACCESS] Upsert portfolio details
     * @param scope The scope of the transaction portfolio to update or insert details for.
     * @param code The code of the transaction portfolio to update or insert details for. Together with the              scope this uniquely identifies the transaction portfolio.
     * @param effectiveAt The effective datetime or cut label at which the updated or inserted details should become valid.              Defaults to the current LUSID system datetime if not specified.
     * @param details The details to update or insert for the specified transaction portfolio.
     */
    upsertPortfolioDetails(scope: string, code: string, effectiveAt?: string, details?: CreatePortfolioDetails, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PortfolioDetails;
    }>;
    /**
     * Update or insert one or more transaction properties to a single transaction in a transaction portfolio.  Each property will be updated if it already exists and inserted if it does not.  Both transaction and portfolio must exist at the time when properties are updated or inserted.
     * @summary [EARLY ACCESS] Upsert transaction properties
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param transactionId The unique id of the transaction to update or insert properties against.
     * @param transactionProperties The properties with their associated values to update or insert onto the              transaction.
     */
    upsertTransactionProperties(scope: string, code: string, transactionId: string, transactionProperties: {
        [key: string]: PerpetualProperty;
    }, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UpsertTransactionPropertiesResponse;
    }>;
    /**
     * Update or insert transactions into the specified transaction portfolio. A transaction will be updated  if it already exists and inserted if it does not.  The maximum number of transactions that this method can upsert per request is 10,000.
     * @summary [EARLY ACCESS] Upsert transactions
     * @param scope The scope of the transaction portfolio.
     * @param code The code of the transaction portfolio. Together with the scope this uniquely identifies              the transaction portfolio.
     * @param transactions The transactions to be updated or inserted.
     */
    upsertTransactions(scope: string, code: string, transactions?: Array<TransactionRequest>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UpsertPortfolioTransactionsResponse;
    }>;
}
